{"ast":null,"code":"var DEFAULT_OVERSHOOT_STRENGTH = 1.525;\n\nvar reversed = function reversed(easing) {\n  return function (p) {\n    return 1 - easing(1 - p);\n  };\n};\n\nvar mirrored = function mirrored(easing) {\n  return function (p) {\n    return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n  };\n};\n\nvar createReversedEasing = reversed;\nvar createMirroredEasing = mirrored;\n\nvar createExpoIn = function createExpoIn(power) {\n  return function (p) {\n    return Math.pow(p, power);\n  };\n};\n\nvar createBackIn = function createBackIn(power) {\n  return function (p) {\n    return p * p * ((power + 1) * p - power);\n  };\n};\n\nvar createAnticipateEasing = function createAnticipateEasing(power) {\n  var backEasing = createBackIn(power);\n  return function (p) {\n    return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n  };\n};\n\nvar linear = function linear(p) {\n  return p;\n};\n\nvar easeIn = /*#__PURE__*/createExpoIn(2);\nvar easeOut = /*#__PURE__*/reversed(easeIn);\nvar easeInOut = /*#__PURE__*/mirrored(easeIn);\n\nvar circIn = function circIn(p) {\n  return 1 - Math.sin(Math.acos(p));\n};\n\nvar circOut = /*#__PURE__*/reversed(circIn);\nvar circInOut = /*#__PURE__*/mirrored(circOut);\nvar backIn = /*#__PURE__*/createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nvar backOut = /*#__PURE__*/reversed(backIn);\nvar backInOut = /*#__PURE__*/mirrored(backIn);\nvar anticipate = /*#__PURE__*/createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);\nvar BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\nvar BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\nvar BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\nvar ca = 4356.0 / 361.0;\nvar cb = 35442.0 / 1805.0;\nvar cc = 16061.0 / 1805.0;\n\nvar bounceOut = function bounceOut(p) {\n  var p2 = p * p;\n  return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;\n};\n\nvar bounceIn = function bounceIn(p) {\n  return 1.0 - bounceOut(1.0 - p);\n};\n\nvar bounceInOut = function bounceInOut(p) {\n  return p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\n};\n\nvar NEWTON_ITERATIONS = 8;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar K_SPLINE_TABLE_SIZE = 11;\nvar K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);\nvar FLOAT_32_SUPPORTED = typeof Float32Array !== 'undefined';\n\nvar a = function a(a1, a2) {\n  return 1.0 - 3.0 * a2 + 3.0 * a1;\n};\n\nvar b = function b(a1, a2) {\n  return 3.0 * a2 - 6.0 * a1;\n};\n\nvar c = function c(a1) {\n  return 3.0 * a1;\n};\n\nvar getSlope = function getSlope(t, a1, a2) {\n  return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\n};\n\nvar calcBezier = function calcBezier(t, a1, a2) {\n  return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n};\n\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n  var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);\n\n  var binarySubdivide = function binarySubdivide(aX, aA, aB) {\n    var i = 0;\n    var currentX;\n    var currentT;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  };\n\n  var newtonRaphsonIterate = function newtonRaphsonIterate(aX, aGuessT) {\n    var i = 0;\n    var currentSlope = 0;\n    var currentX;\n\n    for (; i < NEWTON_ITERATIONS; ++i) {\n      currentSlope = getSlope(aGuessT, mX1, mX2);\n\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n\n      currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  };\n\n  var calcSampleValues = function calcSampleValues() {\n    for (var i = 0; i < K_SPLINE_TABLE_SIZE; ++i) {\n      sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);\n    }\n  };\n\n  var getTForX = function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = K_SPLINE_TABLE_SIZE - 1;\n    var dist = 0.0;\n    var guessForT = 0.0;\n    var initialSlope = 0.0;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += K_SAMPLE_STEP_SIZE;\n    }\n\n    --currentSample;\n    dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;\n    initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);\n    }\n  };\n\n  calcSampleValues();\n\n  var resolver = function resolver(aX) {\n    var returnValue;\n\n    if (mX1 === mY1 && mX2 === mY2) {\n      returnValue = aX;\n    } else if (aX === 0) {\n      returnValue = 0;\n    } else if (aX === 1) {\n      returnValue = 1;\n    } else {\n      returnValue = calcBezier(getTForX(aX), mY1, mY2);\n    }\n\n    return returnValue;\n  };\n\n  return resolver;\n}\n\nexport { reversed, mirrored, createReversedEasing, createMirroredEasing, createExpoIn, createBackIn, createAnticipateEasing, linear, easeIn, easeOut, easeInOut, circIn, circOut, circInOut, backIn, backOut, backInOut, anticipate, bounceOut, bounceIn, bounceInOut, cubicBezier };","map":{"version":3,"sources":["C:/Users/zubin/vivanwebsite/node_modules/@popmotion/easing/dist/easing.es.js"],"names":["DEFAULT_OVERSHOOT_STRENGTH","reversed","easing","p","mirrored","createReversedEasing","createMirroredEasing","createExpoIn","power","Math","pow","createBackIn","createAnticipateEasing","backEasing","linear","easeIn","easeOut","easeInOut","circIn","sin","acos","circOut","circInOut","backIn","backOut","backInOut","anticipate","BOUNCE_FIRST_THRESHOLD","BOUNCE_SECOND_THRESHOLD","BOUNCE_THIRD_THRESHOLD","ca","cb","cc","bounceOut","p2","bounceIn","bounceInOut","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","K_SPLINE_TABLE_SIZE","K_SAMPLE_STEP_SIZE","FLOAT_32_SUPPORTED","Float32Array","a","a1","a2","b","c","getSlope","t","calcBezier","cubicBezier","mX1","mY1","mX2","mY2","sampleValues","Array","binarySubdivide","aX","aA","aB","i","currentX","currentT","abs","newtonRaphsonIterate","aGuessT","currentSlope","calcSampleValues","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","resolver","returnValue"],"mappings":"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","sourcesContent":["var DEFAULT_OVERSHOOT_STRENGTH = 1.525;\r\nvar reversed = function (easing) {\r\n    return function (p) {\r\n        return 1 - easing(1 - p);\r\n    };\r\n};\r\nvar mirrored = function (easing) {\r\n    return function (p) {\r\n        return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\r\n    };\r\n};\r\nvar createReversedEasing = reversed;\r\nvar createMirroredEasing = mirrored;\r\nvar createExpoIn = function (power) {\r\n    return function (p) {\r\n        return Math.pow(p, power);\r\n    };\r\n};\r\nvar createBackIn = function (power) {\r\n    return function (p) {\r\n        return p * p * ((power + 1) * p - power);\r\n    };\r\n};\r\nvar createAnticipateEasing = function (power) {\r\n    var backEasing = createBackIn(power);\r\n    return function (p) {\r\n        return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\r\n    };\r\n};\r\nvar linear = function (p) {\r\n    return p;\r\n};\r\nvar easeIn = /*#__PURE__*/createExpoIn(2);\r\nvar easeOut = /*#__PURE__*/reversed(easeIn);\r\nvar easeInOut = /*#__PURE__*/mirrored(easeIn);\r\nvar circIn = function (p) {\r\n    return 1 - Math.sin(Math.acos(p));\r\n};\r\nvar circOut = /*#__PURE__*/reversed(circIn);\r\nvar circInOut = /*#__PURE__*/mirrored(circOut);\r\nvar backIn = /*#__PURE__*/createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\r\nvar backOut = /*#__PURE__*/reversed(backIn);\r\nvar backInOut = /*#__PURE__*/mirrored(backIn);\r\nvar anticipate = /*#__PURE__*/createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);\r\nvar BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\r\nvar BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\r\nvar BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\r\nvar ca = 4356.0 / 361.0;\r\nvar cb = 35442.0 / 1805.0;\r\nvar cc = 16061.0 / 1805.0;\r\nvar bounceOut = function (p) {\r\n    var p2 = p * p;\r\n    return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;\r\n};\r\nvar bounceIn = function (p) {\r\n    return 1.0 - bounceOut(1.0 - p);\r\n};\r\nvar bounceInOut = function (p) {\r\n    return p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\r\n};\r\nvar NEWTON_ITERATIONS = 8;\r\nvar NEWTON_MIN_SLOPE = 0.001;\r\nvar SUBDIVISION_PRECISION = 0.0000001;\r\nvar SUBDIVISION_MAX_ITERATIONS = 10;\r\nvar K_SPLINE_TABLE_SIZE = 11;\r\nvar K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);\r\nvar FLOAT_32_SUPPORTED = typeof Float32Array !== 'undefined';\r\nvar a = function (a1, a2) {\r\n    return 1.0 - 3.0 * a2 + 3.0 * a1;\r\n};\r\nvar b = function (a1, a2) {\r\n    return 3.0 * a2 - 6.0 * a1;\r\n};\r\nvar c = function (a1) {\r\n    return 3.0 * a1;\r\n};\r\nvar getSlope = function (t, a1, a2) {\r\n    return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\r\n};\r\nvar calcBezier = function (t, a1, a2) {\r\n    return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\r\n};\r\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\r\n    var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);\r\n    var binarySubdivide = function (aX, aA, aB) {\r\n        var i = 0;\r\n        var currentX;\r\n        var currentT;\r\n        do {\r\n            currentT = aA + (aB - aA) / 2.0;\r\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\r\n            if (currentX > 0.0) {\r\n                aB = currentT;\r\n            } else {\r\n                aA = currentT;\r\n            }\r\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\r\n        return currentT;\r\n    };\r\n    var newtonRaphsonIterate = function (aX, aGuessT) {\r\n        var i = 0;\r\n        var currentSlope = 0;\r\n        var currentX;\r\n        for (; i < NEWTON_ITERATIONS; ++i) {\r\n            currentSlope = getSlope(aGuessT, mX1, mX2);\r\n            if (currentSlope === 0.0) {\r\n                return aGuessT;\r\n            }\r\n            currentX = calcBezier(aGuessT, mX1, mX2) - aX;\r\n            aGuessT -= currentX / currentSlope;\r\n        }\r\n        return aGuessT;\r\n    };\r\n    var calcSampleValues = function () {\r\n        for (var i = 0; i < K_SPLINE_TABLE_SIZE; ++i) {\r\n            sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);\r\n        }\r\n    };\r\n    var getTForX = function (aX) {\r\n        var intervalStart = 0.0;\r\n        var currentSample = 1;\r\n        var lastSample = K_SPLINE_TABLE_SIZE - 1;\r\n        var dist = 0.0;\r\n        var guessForT = 0.0;\r\n        var initialSlope = 0.0;\r\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\r\n            intervalStart += K_SAMPLE_STEP_SIZE;\r\n        }\r\n        --currentSample;\r\n        dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\r\n        guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;\r\n        initialSlope = getSlope(guessForT, mX1, mX2);\r\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\r\n            return newtonRaphsonIterate(aX, guessForT);\r\n        } else if (initialSlope === 0.0) {\r\n            return guessForT;\r\n        } else {\r\n            return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);\r\n        }\r\n    };\r\n    calcSampleValues();\r\n    var resolver = function (aX) {\r\n        var returnValue;\r\n        if (mX1 === mY1 && mX2 === mY2) {\r\n            returnValue = aX;\r\n        } else if (aX === 0) {\r\n            returnValue = 0;\r\n        } else if (aX === 1) {\r\n            returnValue = 1;\r\n        } else {\r\n            returnValue = calcBezier(getTForX(aX), mY1, mY2);\r\n        }\r\n        return returnValue;\r\n    };\r\n    return resolver;\r\n}\r\n\r\nexport { reversed, mirrored, createReversedEasing, createMirroredEasing, createExpoIn, createBackIn, createAnticipateEasing, linear, easeIn, easeOut, easeInOut, circIn, circOut, circInOut, backIn, backOut, backInOut, anticipate, bounceOut, bounceIn, bounceInOut, cubicBezier };\r\n"]},"metadata":{},"sourceType":"module"}